import { NextRequest, NextResponse } from 'next/server';
import { getProducts, getCategories, getBlogPosts, getBlogCategories } from '../../../lib/db';

/**
 * API route for generating a dynamic sitemap
 * This complements the static sitemap generated by next-sitemap
 */
export const dynamic = 'force-dynamic';
export async function GET(request: NextRequest) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://dutchseedsupply.com';
    
    // Fetch all dynamic data
    const [
      { data: products = [] },
      { data: categories = [] },
      { data: blogPosts = [] },
      { data: blogCategories = [] }
    ] = await Promise.all([
      getProducts(),
      getCategories(),
      getBlogPosts(),
      getBlogCategories()
    ]);
    
    // Start XML
    let xml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`;
    
    // Add product URLs
    if (products) {
      for (const product of products) {
        xml += `
  <url>
    <loc>${baseUrl}/products/${product.slug}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>`;
      }
    }
    
    // Add category URLs
    if (categories) {
      for (const category of categories) {
        xml += `
  <url>
    <loc>${baseUrl}/products/category/${category.slug}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
  </url>`;
      }
    }
    
    // Add blog post URLs
    if (blogPosts) {
      for (const post of blogPosts) {
        xml += `
  <url>
    <loc>${baseUrl}/blog/${post.slug}</loc>
    <lastmod>${new Date(post.published_at || post.created_at).toISOString()}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>`;
      }
    }
    
    // Add blog category URLs
    if (blogCategories) {
      for (const category of blogCategories) {
        xml += `
  <url>
    <loc>${baseUrl}/blog/category/${category.slug}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.5</priority>
  </url>`;
      }
    }
    
    // Close XML
    xml += `
</urlset>`;
    
    // Return XML with proper content type
    return new NextResponse(xml, {
      headers: {
        'Content-Type': 'application/xml',
        'Cache-Control': 'public, max-age=3600, s-maxage=3600'
      }
    });
  } catch (error) {
    console.error('Error generating sitemap:', error);
    return NextResponse.json(
      { error: 'Failed to generate sitemap' },
      { status: 500 }
    );
  }
}
